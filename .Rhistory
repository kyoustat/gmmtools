??lpSolve
install.packages("lpSolve")
install.packages("lpSolve")
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
help(lpSolve)
library(lpSolve)
devtools::document()
library(gmmtools)
graphics.off()
help(lp)
library(gmmtools)
library(gmmtools)
library(gmmtools)
library(gmmtools)
library(gmmtools)
# -------------------------------------------------------------
# STEP 1. Generate Data and Fit with 9 Components
mydata = T4cluster::gensmiley()$data
myfit  = gmm(mydata, k=9)
# STEP 2. Generate a Grid and Evaluate Over Grid Points
grid.data = expand.grid(x=seq(from=-1.5,to=1.5,length.out=250),
y=seq(from=-1.5,to=1.5,length.out=250))
grid.prob = gmmdensity(grid.data, myfit)
# STEP 3. Visualize with 'ggplot2' (* optional)
if (requireNamespace("ggplot2", quietly = TRUE)){
grid.df = cbind(grid.data, density=grid.prob)
ggplot2::ggplot(grid.df, aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
}
grid.df = cbind(grid.data, density=grid.prob)
ggplot2::ggplot(grid.df, aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
grid.df
class(grid.df)
names(grid.df)
grid.df = cbind(grid.data, density=grid.prob)
ggplot2::ggplot(grid.df,aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
ggplot2::ggplot(grid.df,aes(x=x,y=y,z=density)) +
geom_raster(ggplot2::aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
ggplot2::ggplot(grid.df,ggplot2::aes(x=x,y=y,z=density)) +
geom_raster(ggplot2::aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
ggplot2::ggplot(grid.df,ggplot2::aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
ggplot2::ggplot(grid.df,ggplot2::aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
rm(list=ls())
library(gmmtools)
grid.data = as.matrix(expand.grid(x=seq(from=-1.5,to=1.5,length.out=250),
y=seq(from=-1.5,to=1.5,length.out=250)))
grid.prob = gmmdensity(grid.data, myfit)
# STEP 3. Visualize with 'ggplot2' (* optional)
if (requireNamespace("ggplot2", quietly = TRUE)){
grid.df = cbind(grid.data, density=grid.prob)
ggplot2::ggplot(grid.df,aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
}
mydata = T4cluster::gensmiley()$data
myfit  = gmm(mydata, k=9)
# STEP 2. Generate a Grid and Evaluate Over Grid Points
grid.data = as.matrix(expand.grid(x=seq(from=-1.5,to=1.5,length.out=250),
y=seq(from=-1.5,to=1.5,length.out=250)))
grid.prob = gmmdensity(grid.data, myfit)
# STEP 3. Visualize with 'ggplot2' (* optional)
if (requireNamespace("ggplot2", quietly = TRUE)){
grid.df = cbind(grid.data, density=grid.prob)
ggplot2::ggplot(grid.df,aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
}
mydata = T4cluster::gensmiley()$data
myfit  = gmm(mydata, k=9)
# STEP 2. Generate a Grid and Evaluate Over Grid Points
grid.data = as.matrix(expand.grid(x=seq(from=-1.5,to=1.5,length.out=250),
y=seq(from=-1.5,to=1.5,length.out=250)))
grid.prob = gmmdensity(grid.data, myfit)
# STEP 3. Visualize with 'ggplot2' (* optional)
if (requireNamespace("ggplot2", quietly = TRUE)){
grid.df = cbind(grid.data, density=grid.prob)
ggplot2::ggplot(grid.df,aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
}
names(grid.data)
names(grid.df)
mydata = T4cluster::gensmiley()$data
myfit  = gmm(mydata, k=9)
# STEP 2. Generate a Grid and Evaluate Over Grid Points
grid.data = as.matrix(expand.grid(x=seq(from=-1.5,to=1.5,length.out=250),
y=seq(from=-1.5,to=1.5,length.out=250)))
grid.prob = gmmdensity(grid.data, myfit)
grid.df = cbind(grid.data, density=grid.prob)
names(grid.df)
head(grid.df)
ggplot2::ggplot(grid.df,aes(x=x,y=y,z=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
# STEP 1. 10 datasets with noise
list_data = list()
for (i in 1:10){
list_data[[i]] = T4cluster::gensmiley(sd=0.25)
}
# STEP 2. Fit GMM with varying k
list_gmm = list()
for (i in 1:10){
list_gmm[[i]] = gmm(list_data[[i]]$data, k=sample(3:9, 1))
}
# STEP 3. Find Median of GMMs under L2 metric
medgmm = medianL2(list_gmm)
# we use 'ggplot2' for visualization
if (requireNamespace("ggplot2", quietly = TRUE)){
# prepare grid and density evaluation
grid.data = expand.grid(x=seq(from=-1.5,to=1.5,length.out=250),
y=seq(from=-1.5,to=1.5,length.out=250))
grid.prob = gmmdensity(grid.data, medgmm)
grid.df   = cbind(grid.data, density=grid.prob)
# plot
ggplot2::ggplot(grid.df, aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("L2 Median of 10 GMMs")
}
# STEP 1. 10 datasets with noise
list_data = list()
for (i in 1:10){
list_data[[i]] = T4cluster::gensmiley(sd=0.25)
}
# STEP 2. Fit GMM with varying k
list_gmm = list()
for (i in 1:10){
list_gmm[[i]] = gmm(list_data[[i]]$data, k=sample(3:9, 1))
}
# STEP 3. Find Median of GMMs under L2 metric
medgmm = medianL2(list_gmm)
# we use 'ggplot2' for visualization
if (requireNamespace("ggplot2", quietly = TRUE)){
# prepare grid and density evaluation
grid.data = expand.grid(x=seq(from=-1.5,to=1.5,length.out=250),
y=seq(from=-1.5,to=1.5,length.out=250))
grid.prob = gmmdensity(grid.data, medgmm)
grid.df   = cbind(grid.data, density=grid.prob)
# plot
ggplot2::ggplot(grid.df, aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("L2 Median of 10 GMMs")
}
requireNamespace("ggplot2", quietly = TRUE)
library(ggplot2)
if (requireNamespace("ggplot2", quietly = TRUE)){
# prepare grid and density evaluation
grid.data = expand.grid(x=seq(from=-1.5,to=1.5,length.out=250),
y=seq(from=-1.5,to=1.5,length.out=250))
grid.prob = gmmdensity(grid.data, medgmm)
grid.df   = cbind(grid.data, density=grid.prob)
# plot
ggplot2::ggplot(grid.df, aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("L2 Median of 10 GMMs")
}
install.packages("TDAstats")
library(TDAstats)
help("plot_persist")
# create a 2-d point cloud of a circle (100 points)
num.pts <- 100
rand.angle <- runif(num.pts, 0, 2*pi)
pt.cloud <- cbind(cos(rand.angle), sin(rand.angle))
# calculate persistent homology (num.pts by 3 numeric matrix)
pers.hom <- calculate_homology(pt.cloud)
# plot calculated homology features as persistence diagram
plot_persist(pers.hom)
requireNamespace("ggplot2")
help("requireNamespace")
devtools::document()
library(gmmtools)
library(gmmtools)
# -------------------------------------------------------------
#       Evaluate Density of GMM Fit from Smiley Data
# -------------------------------------------------------------
# STEP 1. Generate Data and Fit with 9 Components
mydata = T4cluster::gensmiley()$data
myfit  = gmm(mydata, k=9)
# STEP 2. Generate a Grid and Evaluate Over Grid Points
grid.data = as.matrix(expand.grid(x=seq(from=-1.5,to=1.5,length.out=250),
y=seq(from=-1.5,to=1.5,length.out=250)))
grid.prob = gmmdensity(grid.data, myfit)
# STEP 3. Visualize with 'ggplot2' (* optional)
if (requireNamespace("ggplot2", quietly = TRUE)){
grid.df = cbind(grid.data, density=grid.prob)
ggplot2::ggplot(grid.df,aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
}
class(grid.df)
grid.df = as.data.frame(cbind(grid.data, density=grid.prob))
ggplot2::ggplot(grid.df,aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
library(gmmtools)
library(gmmtools)
mydata = T4cluster::gensmiley()$data
myfit  = gmm(mydata, k=9)
# STEP 2. Generate a Grid and Evaluate Over Grid Points
grid.data = as.matrix(expand.grid(x=seq(from=-1.5,to=1.5,length.out=250),
y=seq(from=-1.5,to=1.5,length.out=250)))
grid.prob = gmmdensity(grid.data, myfit)
# STEP 3. Visualize with 'ggplot2' (* optional)
if (requireNamespace("ggplot2", quietly = TRUE)){
grid.df = as.data.frame(cbind(grid.data, density=grid.prob))
ggplot(grid.df,aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
}
mydata = T4cluster::gensmiley()$data
myfit  = gmm(mydata, k=9)
# STEP 2. Generate a Grid and Evaluate Over Grid Points
grid.data = as.matrix(expand.grid(x=seq(from=-1.5,to=1.5,length.out=250),
y=seq(from=-1.5,to=1.5,length.out=250)))
grid.prob = gmmdensity(grid.data, myfit)
# STEP 3. Visualize with 'ggplot2' (* optional)
if (requireNamespace("ggplot2", quietly = TRUE)){
grid.df = as.data.frame(cbind(grid.data, density=grid.prob))
ggplot(grid.df,aes(x=x,y=y,z=density)) +
geom_raster(aes(fill=density)) +
geom_contour(colour="white") +
scale_fill_viridis_c() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
coord_fixed(xlim=c(-1.5,1.5), ylim=c(-1.5,1.5)) +
ggtitle("contour of 9-component GMM density")
}
library(gmmtools)
library(gmmtools)
library(gmmtools)
graphics.off()
rm(list=ls())
library(gmmtools)
library(gmmtools)
library(gmmtools)
library(gmmtools)
## PREPARE
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## EMBEDDING WITH PCA
X2d = Rdimtools::do.pca(X, ndim=2)$Y
## COMPARE WITH STANDARD GMM
cl.gmm = gmm(X, k=3)$cluster
cl.11Rf = gmm11R(X, k=3)$cluster
cl.11Rd = gmm11R(X, k=3, usediag=TRUE)$cluster
## VISUALIZATION
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(X2d, col=cl.gmm,  pch=19, main="standard GMM")
plot(X2d, col=cl.11Rf, pch=19, main="gmm11R: full covs")
plot(X2d, col=cl.11Rd, pch=19, main="gmm11R: diagonal covs")
par(opar)
cl.gmm = gmm(X, k=3)$cluster
cl.11Rf = gmm11R(X, k=3)$cluster
library(gmmtools)
cl.11Rf = gmm11R(X, k=3)
cl.11Rf
cl.11Rf$cluster
rm(list=ls())
library(gmmtools)
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## EMBEDDING WITH PCA
X2d = Rdimtools::do.pca(X, ndim=2)$Y
## COMPARE WITH STANDARD GMM
cl.gmm  = gmm(X, k=3)
cl.11Rf = gmm11R(X, k=3)
cl.11Rd = gmm11R(X, k=3, usediag=TRUE)
cl.11Rf$cluster
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(X2d, col=cl.gmm$cluster,  pch=19, main="standard GMM")
plot(X2d, col=cl.11Rf$cluster, pch=19, main="gmm11R: full covs")
plot(X2d, col=cl.11Rd$cluster, pch=19, main="gmm11R: diagonal covs")
par(opar)
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(X2d, col=cl.gmm$cluster,  pch=19, main="standard GMM")
plot(X2d, col=cl.11Rf$cluster, pch=19, main="gmm11R: full covs")
plot(X2d, col=cl.11Rd$cluster, pch=19, main="gmm11R: diagonal covs")
par(opar)
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(X2d, col=cl.gmm$cluster,  pch=19, main="standard GMM")
plot(X2d, col=cl.11Rf$cluster, pch=19, main="gmm11R: full covs")
plot(X2d, col=cl.11Rd$cluster, pch=19, main="gmm11R: diagonal covs")
par(opar)
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(X2d, col=cl.gmm$cluster,  pch=19, main="standard GMM")
plot(X2d, col=cl.11Rf$cluster, pch=19, main="gmm11R: full covs")
plot(X2d, col=cl.11Rd$cluster, pch=19, main="gmm11R: diagonal covs")
par(opar)
## PREPARE
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## EMBEDDING WITH PCA
X2d = Rdimtools::do.pca(X, ndim=2)$Y
## COMPARE WITH STANDARD GMM
cl.gmm  = gmm(X, k=3)
cl.11Rf = gmm11R(X, k=3)
cl.11Rd = gmm11R(X, k=3, usediag=TRUE)
## VISUALIZATION
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(X2d, col=cl.gmm$cluster,  pch=19, main="standard GMM")
plot(X2d, col=cl.11Rf$cluster, pch=19, main="gmm11R: full covs")
plot(X2d, col=cl.11Rd$cluster, pch=19, main="gmm11R: diagonal covs")
par(opar)
## PREPARE
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## EMBEDDING WITH PCA
X2d = Rdimtools::do.pca(X, ndim=2)$Y
## COMPARE WITH STANDARD GMM
cl.gmm  = gmm(X, k=3)
cl.11Rf = gmm11R(X, k=3)
cl.11Rd = gmm11R(X, k=3, usediag=TRUE)
## VISUALIZATION
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(X2d, col=cl.gmm$cluster,  pch=19, main="standard GMM")
plot(X2d, col=cl.11Rf$cluster, pch=19, main="gmm11R: full covs")
plot(X2d, col=cl.11Rd$cluster, pch=19, main="gmm11R: diagonal covs")
par(opar)
## PREPARE
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## EMBEDDING WITH PCA
X2d = Rdimtools::do.pca(X, ndim=2)$Y
## COMPARE WITH STANDARD GMM
cl.gmm  = gmm(X, k=3)
cl.11Rf = gmm11R(X, k=3)
cl.11Rd = gmm11R(X, k=3, usediag=TRUE)
## VISUALIZATION
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(X2d, col=cl.gmm$cluster,  pch=19, main="standard GMM")
plot(X2d, col=cl.11Rf$cluster, pch=19, main="gmm11R: full covs")
plot(X2d, col=cl.11Rd$cluster, pch=19, main="gmm11R: diagonal covs")
par(opar)
## PREPARE
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## EMBEDDING WITH PCA
X2d = Rdimtools::do.pca(X, ndim=2)$Y
## COMPARE WITH STANDARD GMM
cl.gmm  = gmm(X, k=3)
cl.11Rf = gmm11R(X, k=3)
cl.11Rd = gmm11R(X, k=3, usediag=TRUE)
## VISUALIZATION
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(X2d, col=cl.gmm$cluster,  pch=19, main="standard GMM")
plot(X2d, col=cl.11Rf$cluster, pch=19, main="gmm11R: full covs")
plot(X2d, col=cl.11Rd$cluster, pch=19, main="gmm11R: diagonal covs")
par(opar)
library(gmmtools)
help(gmm11R)
library(gmmtools)
## PREPARE
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## EMBEDDING WITH PCA
X2d = Rdimtools::do.pca(X, ndim=2)$Y
## CLUSTERING WITH DIFFERENT K VALUES
cl2 = gmm16G(X, k=2)$cluster
cl2
## CLUSTERING WITH DIFFERENT K VALUES
cl2 = gmm16G(X, k=2)$cluster
cl3 = gmm16G(X, k=3)$cluster
cl4 = gmm16G(X, k=4)$cluster
## VISUALIZATION
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,4), pty="s")
plot(X2d, col=lab, pch=19, main="true label")
plot(X2d, col=cl2, pch=19, main="gmm16G: k=2")
plot(X2d, col=cl3, pch=19, main="gmm16G: k=3")
plot(X2d, col=cl4, pch=19, main="gmm16G: k=4")
par(opar)
help(gmm16G)
library(gmmtools)
# -------------------------------------------------------------
#            clustering with 'iris' dataset
# -------------------------------------------------------------
## PREPARE
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## EMBEDDING WITH PCA
X2d = Rdimtools::do.pca(X, ndim=2)$Y
## CLUSTERING WITH DIFFERENT K VALUES
cl2 = gmm16G(X, k=2)$cluster
cl3 = gmm16G(X, k=3)$cluster
cl4 = gmm16G(X, k=4)$cluster
## VISUALIZATION
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,4), pty="s")
plot(X2d, col=lab, pch=19, main="true label")
plot(X2d, col=cl2, pch=19, main="gmm16G: k=2")
plot(X2d, col=cl3, pch=19, main="gmm16G: k=3")
plot(X2d, col=cl4, pch=19, main="gmm16G: k=4")
par(opar)
help(gmm16G)
library(gmmtools)
library(gmmtools)
